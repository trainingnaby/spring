
////////////////// Intégration de services REST //////////////////

Objectif :  exposer des services REST => on a besoin d'un serveur 
	Utilisation d'un tomcat embarqué
	
Copier le projet  1_fil_rouge_init et renommer le en 2_fil_rouge_rest

Modifier dans le fichier pom.xml la valeur de la balise artifactId et y mettre comme valeur 2_fil_rouge_rest

//////////// Ajout des dépendances /////////////

Ajouter dans le fichier pom.xml

	<packaging>jar</packaging>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.11.0</version>
			</plugin>
		</plugins>
	</build>

Ajouter la dépendance tomcat :

	<dependency>
        <groupId>org.apache.tomcat.embed</groupId>
        <artifactId>tomcat-embed-core</artifactId>
        <version>10.1.8</version>
    </dependency>
	
Ajouter la dépendance spring-webmvc 

	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-webmvc</artifactId>
		<version>6.0.9</version>
	</dependency>
	
//////////////// premier controlleur ///////////////////

Créer un package com.formation.controller

Créer dans ce package la classe :

	@Controller 
	public class MonPremierControlleurSpring {

		@GetMapping("/")
		@ResponseBody
		public String index() {
			return "Ici mon premier controlleur Spring !";
		}
	}
	
////////////////// Configuration de la servlet principal de Spring ///////////////////

Pour exposer des services rest/web avec Spring, il faut déclarer une servlet qui s'appelle DispatcherServlet. Ce servlet recevra toutes les requêtes et les dispatchera au bon controlleur selon le path de la requête

L'application sera déployée dans le serveur tomcat; On doit fournir à Tomcat le point d'entrée de notre application, qui est la DispatcherServlet

Supprimer le classe de test crééé initialement dans le projet 1_fil_rouge_init

Créer un package com.formation.config

Créer dans ce package la classe suivante :

	package com.formation.config;
	import org.apache.catalina.Context;
	import org.apache.catalina.LifecycleException;
	import org.apache.catalina.Wrapper;
	import org.apache.catalina.startup.Tomcat;
	import org.springframework.web.context.WebApplicationContext;
	import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;
	import org.springframework.web.servlet.DispatcherServlet;

	import jakarta.servlet.ServletContext;

	public class AppMainWithTomcat {

	public static void main(String[] args) throws LifecycleException {

		// création d'une instance de tomcat
		Tomcat tomcat = new Tomcat();
		// port d'écoute
		tomcat.setPort(8080);
		// initialise le moteur tomcat
		tomcat.getConnector();
		
		//contexte path de notre application
		Context contexteTomcat = tomcat.addContext("", null);

		// création de l'application context de type web (voir méthode plus bas)
		WebApplicationContext appCtx = creationApplicationContext(contexteTomcat.getServletContext());
		
		//Initialisation du servlet frontal DispatcherServlet, a besoin de connaitre le contexte web donc des controlleurs existants
		DispatcherServlet dispatcherServlet = new DispatcherServlet(appCtx);
		
		//Enregistrement de la servlet sur tomcat
		Wrapper servlet = Tomcat.addServlet(contexteTomcat, "dispatcherServlet", dispatcherServlet);
		servlet.setLoadOnStartup(1);
		servlet.addMapping("/*");

		tomcat.start();
	}

	/**
	 * Création de l'application contexte
	 * @param servletContext
	 * @return
	 */
	public static WebApplicationContext creationApplicationContext(ServletContext servletContext) {
		
		AnnotationConfigWebApplicationContext ctx = new AnnotationConfigWebApplicationContext();
		ctx.register(AppConfig.class); //classe de configuration
		ctx.setServletContext(servletContext);
		ctx.refresh();
		ctx.registerShutdownHook();
		return ctx;
	}
	}

///////////////// Configuration du livrable de type Jar //////////////////////

Utilisation du plugin shade de Maven qui permet d'embraquer les librairies nécessaires et de définir la classe principale de notre application

Ajouter dans la section <build><plugins> du fichier pom.xml :

	<plugin>
		<groupId>org.apache.maven.plugins</groupId>
		<artifactId>maven-shade-plugin</artifactId>
		<version>3.4.1</version>
		<executions>
			<execution>
				<phase>package</phase>
				<goals>
					<goal>shade</goal>
				</goals>
				<configuration>
					<transformers>
						<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
							<mainClass>com.formation.config.AppMainWithTomcat</mainClass>
						</transformer>
					</transformers>
				</configuration>
			</execution>
		</executions>
	</plugin>
	
	
///////////////// Ajout des endpoints REST ///////////////	

Annoter la classe de configuration avec @EnableWebMvc
	
On veut créer deux endpoints REST dans l'application :
	GET /duplicatas => renvoie tous les duplicatas
	POST /duplicatas => créer un duplicata
	
Créer un package com.formation.web

Créer dans ce package la classe DuplicataControlleur :

	package com.formation.web;

	import java.util.List;

	import org.springframework.web.bind.annotation.GetMapping;
	import org.springframework.web.bind.annotation.RestController;

	import com.formation.domain.Duplicata;
	import com.formation.service.DuplicataService;

	@RestController
	public class DuplicataControlleur {

		@Autowired
		private final DuplicataService duplicataService;

		public DuplicataControlleur(DuplicataService duplicataService) {
			this.duplicataService = duplicataService;
		}

		@GetMapping("/duplicatas")
		// @RequestMapping(value = "/duplicatas", method = RequestMethod.GET)
		public List<Duplicata> duplicatas() {
			return duplicataService.getDuplicats();
		}
	}
	
Tester le endpoint /duplicatas
Que remarquez vous ?

///////////////// Intégration librairie Jackson /////////////////

L'erreur 406 est du au fait que quand on appelle le service /duplicatas, le controlleur retourne une liste et spring ne sait nativement faire la conversion en json : Il nous faut configurer une classe qui permet de faire ça

jackson est une librairie qui permet la conversion objet<=>json. La classe qui fait le travail est ObjectMapper


Ajouter la dépendance Jackson dans le fichier pom.xml
	<dependency>
		<groupId>com.fasterxml.jackson.core</groupId>
		<artifactId>jackson-databind</artifactId>
		<version>2.15.0</version>
	</dependency>

Tester 

///////////////// endpoint /createDuplicata ///////////////////

Ajouter le endpoint REST permettant la création d'un duplicata dans la controlleur DuplicataControlleur
 	
	@PostMapping("/duplicatas")
	public Duplicata createDuplicata(@RequestParam("user_id") String userId, @RequestParam Integer montant) {
		return duplicataService.createDuplicata(userId, montant);
	}
	
//////////// @RequestParam  vs @PathVariable //////////////////

Créer un nouveau endpoint de création de duplicata mais en récupérant les paramétres du duplicata à créer dans le path de la requête

	 @PostMapping("/duplicatas/{userId}/{montant}")
	  public Duplicata createDuplicata_path(@PathVariable String userId, @PathVariable Integer montant) {
			// à implementer
	  
//////////// Utilisation de DTOs (Data Transfer Object) /////////////

Jusqu'a présent, on récuperait les paramètres du duplicata à créer soit dans les paramètres de la requête, soit le path 
L'objectif est d'accepter comme payload un json en entrée

Créer un package com.formation.dto

Créer une classe DuplicataDto dans ce package
	package com.formation.dto;
	import com.fasterxml.jackson.annotation.JsonProperty;

	public class DuplicataDto {

		@JsonProperty("user_id")
		private String userId;

		private Integer montant;

		public String getUserId() {
			return userId;
		}

		public void setUserId(String userId) {
			this.userId = userId;
		}

		public Integer getMontant() {
			return montant;
		}

		public void setMontant(Integer montant) {
			this.montant = montant;
		}

	}

Créer un nouveau endpoint pour traiter les requêtes de création de duplicata avec un payload en json 

	@PostMapping("/duplicatas")
    public Duplicata createDuplicata_dto(@RequestBody DuplicataDto duplicataDto) {
        // à implementer
    }
	
////////////// Envoyer du XML en réponse ////////////////

Ajouter cette dépendance qui permet la conversion objet<->xml :

	<dependency>
		<groupId>com.fasterxml.jackson.dataformat</groupId>
		<artifactId>jackson-dataformat-xml</artifactId>
		<version>2.15.0</version>
	</dependency>
	
Retester la création et la récuperation de duplicata

/////////////// négociation de contenu //////////////////

Utiliser le header Accept dans postman pour récuperer de nouveau du json

Utiliser le header Content-Type dans postman pour créer des duplicatas via xml ou json

